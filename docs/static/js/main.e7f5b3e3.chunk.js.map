{"version":3,"sources":["component/AddCategory.js","helpers/GetGifs.js","component/GitGridItem.js","component/GitGrid.js","hooks/useFetchGits.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GitGridItem","className","src","alt","GitGrid","loading","state","setstate","useEffect","then","imgs","useFetchGirfs","key","GitExpertApp","categories","Fragment","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OACI,0BAAMC,SAZU,SAACC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAST,EACTU,SApBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,Y,uBCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAWH,GAF9C,+DAGDI,MAAOF,GAHN,cAGdG,EAHc,gBAKGA,EAAKC,OALR,uBAKZC,EALY,EAKZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXtB,kBAkBbM,GAlBa,4CAAH,sDCARO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OACI,yBAAKc,UAAU,iDACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCJJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAZ,SAAEA,GAAe,IAAD,EAEfd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ4B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAqBzC,OAdAC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKvB,CAACpB,IAEIqB,EDnB0BK,CAAc1B,GAAlCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAIrB,OACI,oCACI,wBAAIJ,UAAU,QAAd,IAAuBhB,EAAvB,KAEEoB,GAAW,uBAAGJ,UAAU,yCAAb,WAEb,yBAAKA,UAAU,aACVH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACLD,UEkBbkB,EAlCO,WAAO,IAAD,EAGY1C,mBAAS,CAAC,gBAHtB,mBAGjB2C,EAHiB,KAGL5C,EAHK,KASxB,OACI,6BACG,kBAAC,IAAM6C,SAAP,KACC,4CACA,kBAAC,EAAD,CAAa7C,cAAgBA,IAC7B,6BAEA,4BAEO4C,EAAWpB,KAAK,SAAAT,GAAQ,OACtB,kBAAC,EAAD,CACGA,SAAUA,EACV2B,IAAK3B,WCnB7B+B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.e7f5b3e3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue (e.target.value);\r\n    }\r\n\r\n    const handleSumit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length >2 ){\r\n            setCategories( cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSumit}>\r\n            <input \r\n                type=\"text\"\r\n                value={  inputValue }\r\n                onChange={ handleInputChange }\r\n            ></input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","\r\n\r\n export const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&api_key=jjP8UKZa7PU3Vd78dqJNmODFLw1B5oDs&limit=10`;\r\n    const resp = await fetch( url );\r\n\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n            \r\n        \r\n\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GitGridItem = ({ title, url }) => {\r\n\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInLeftBig\">\r\n            <img src={ url } alt={ title }></img>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGirfs } from '../hooks/useFetchGits';\r\nimport { GitGridItem } from './GitGridItem';\r\n\r\nexport const GitGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGirfs(category);\r\n\r\n \r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"card\"> {category} </h3>\r\n            \r\n            { loading && <p className=\"card animate__animated animate__flash\">Loading</p> }\r\n            \r\n            <div className=\"card-grid\">  \r\n                {images.map( img => (\r\n                    <GitGridItem \r\n                        key={img.id}\r\n                        {...img}\r\n                    >\r\n                    </GitGridItem>\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/GetGifs';\r\n\r\n\r\nexport const useFetchGirfs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                \r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n                \r\n            })\r\n\r\n    },[category])\r\n\r\n    return state;\r\n\r\n    \r\n\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './component/AddCategory';\r\nimport { GitGrid } from './component/GitGrid';\r\n\r\n const GitExpertApp = () => {\r\n\r\n    \r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n    //const handleAdd = () => {\r\n        //setCategories([...categories, 'Pablo Escobar']);\r\n        //setCategories( cats => [...cats, 'Pablo Escobar']);\r\n    //}\r\n    return (\r\n        <div>\r\n           <React.Fragment>\r\n            <h2>GitExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }></AddCategory>\r\n            <hr></hr>\r\n            \r\n            <ol>\r\n               {\r\n                   categories.map( category => (\r\n                     <GitGrid \r\n                        category={category}\r\n                        key={category}\r\n                    >\r\n                     </GitGrid>\r\n                   ))\r\n                   \r\n                   \r\n               }\r\n            </ol>\r\n           </React.Fragment>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GitExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GitExpertApp from './GitExpertApp';\n\n\nReactDOM.render(\n  \n    <GitExpertApp></GitExpertApp>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}